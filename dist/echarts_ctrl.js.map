{"version":3,"sources":["../src/echarts_ctrl.js"],"names":["MetricsPanelCtrl","_","echarts","EchartsCtrl","$scope","$injector","panelDefaults","EchartsOption","IS_MAP","map","USE_URL","USE_FAKE_DATA","fakeData","url","request","updateInterval","maps","defaults","panel","events","on","onDataReceived","bind","onDataError","onInitEditMode","render","updateData","that","xmlhttp","data","eval","window","XMLHttpRequest","ActiveXObject","onreadystatechange","readyState","status","UrlData","JSON","parse","responseText","open","send","$timeout","dataList","undefined","IS_DATA_CHANGED","addEditorTab","System","import","getPanelPath","grafanaBootData","settings","panels","pluginId","baseUrl","scope","elem","attrs","ctrl","$panelContainer","find","option","echartsData","myChart","init","importMap","setTimeout","resize","clear","setOption","renderingCompleted","templateUrl"],"mappings":"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","file":"echarts_ctrl.js","sourcesContent":["import { MetricsPanelCtrl } from 'app/plugins/sdk'; // eslint-disable-line\nimport _ from 'lodash';\nimport echarts from './libs/echarts.min'; // eslint-disable-line\nimport './libs/echarts-liquidfill.min'; // eslint-disable-line\nimport './libs/echarts-wordcloud.min'; // eslint-disable-line\nimport './libs/dark'; // eslint-disable-line\nimport './css/style.css!'; // eslint-disable-line\nimport './libs/bmap.js'; // eslint-disable-line\nimport './libs/getBmap.js'; // eslint-disable-line\n\nexport class EchartsCtrl extends MetricsPanelCtrl { // eslint-disable-line\n\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    const panelDefaults = {\n      EchartsOption: 'console.log(JSON.stringify(echartsData));\\n\\noption = {};',\n      IS_MAP: false,\n      map: '',\n      USE_URL: false,\n      USE_FAKE_DATA: false,\n      fakeData: '',\n      url: '',\n      request: '',\n      updateInterval: 10000,\n    };\n\n    this.maps = ['世界', '中国', '北京'];\n\n    _.defaults(this.panel, panelDefaults);\n\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('panel-initialized', this.render.bind(this));\n\n    this.updateData();\n  }\n\n  // post请求\n  updateData() {\n    const that = this;\n    let xmlhttp;\n\n    if (this.panel.USE_URL && this.panel.USE_FAKE_DATA && this.panel.fakeData) {\n      this.data = eval(this.panel.fakeData);\n    } else\n\n    if (that.panel.USE_URL && !that.panel.USE_FAKE_DATA && that.panel.url && that.panel.request) {\n      if (window.XMLHttpRequest) {\n        xmlhttp = new XMLHttpRequest();\n      } else {\n        xmlhttp = new ActiveXObject('Microsoft.XMLHTTP'); // eslint-disable-line\n      }\n\n      xmlhttp.onreadystatechange = () => {\n        if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {\n          that.UrlData = JSON.parse(xmlhttp.responseText);\n          that.onDataReceived();\n        }\n      };\n\n      xmlhttp.open('POST', that.panel.url, true);\n      xmlhttp.send(that.panel.request);\n    } else {\n      xmlhttp = null;\n    }\n\n    this.$timeout(() => { this.updateData(); }, that.panel.updateInterval);\n  }\n\n  onDataReceived(dataList) {\n    this.data = !this.panel.USE_URL && !this.panel.USE_FAKE_DATA && dataList !== undefined ? dataList : this.data;\n\n    this.IS_DATA_CHANGED = true;\n    this.render();\n    this.IS_DATA_CHANGED = false;\n  }\n\n  onDataError() {\n    this.render();\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('数据', 'public/plugins/dxc-echarts-panel/partials/editer-metric.html', 2);\n    this.addEditorTab('Ecahrts配置', 'public/plugins/dxc-echarts-panel/partials/editor-echarts.html', 3);\n  }\n\n  importMap() {\n    if (!this.panel.IS_MAP) return;\n    switch (this.panel.map) {\n      case '世界':\n        System.import(this.getPanelPath() + 'libs/world.js'); // eslint-disable-line\n        break;\n      case '中国':\n        System.import(this.getPanelPath() + 'libs/china.js'); // eslint-disable-line\n        break;\n      case '北京':\n        System.import(this.getPanelPath() + 'libs/beijing.js'); // eslint-disable-line\n        break;\n      // case '百度地图':\n      //   System.import(this.getPanelPath() + 'libs/bmap.js');\n      //   System.import(this.getPanelPath() + 'libs/getBmap.js');\n      // break;\n      default:\n        break;\n    }\n  }\n\n  getPanelPath() {\n    // the system loader preprends publib to the url, add a .. to go back one level\n    return `../${grafanaBootData.settings.panels[this.pluginId].baseUrl}/`; // eslint-disable-line\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    const $panelContainer = elem.find('.echarts_container')[0];\n    let option = {}; // eslint-disable-line\n    let echartsData = []; // eslint-disable-line\n\n    ctrl.IS_DATA_CHANGED = true;\n\n    // function setHeight() {\n    //   let height = ctrl.height || panel.height || ctrl.row.height;\n    //   if (_.isString(height)) {\n    //     height = parseInt(height.replace('px', ''), 10);\n    //   }\n    //   // height -= 7;\n    //   // height -= ctrl.panel.title ? 25 : 9;\n    //   $panelContainer.style.height = height + 'px';\n    // }\n\n    // // function setWidth() {\n    // //   let width = document.body.clientWidth;\n    // //   width = (width - 5.6 * 2) * ctrl.panel.span / 12 - 5.6 * 2 - 1 * 2 - 10 * 2;\n    // //   $panelContainer.style.width = width + 'px';\n    // // }\n\n    // setHeight();\n    // // setWidth();\n\n    const myChart = echarts.init($panelContainer, 'dark');\n\n    ctrl.importMap();\n\n    // bad hank\n    setTimeout(() => {\n      myChart.resize();\n    }, 1000);\n\n    function render() {\n      if (!myChart) {\n        return;\n      }\n\n      if (ctrl.IS_DATA_CHANGED) {\n        myChart.clear();\n        echartsData = ctrl.data;\n\n        eval(ctrl.panel.EchartsOption);\n\n        myChart.setOption(option);\n      }\n\n      myChart.resize();\n    }\n\n    this.events.on('render', () => {\n      render();\n      ctrl.renderingCompleted();\n    });\n  }\n}\n\nEchartsCtrl.templateUrl = 'module.html';\n"]}